from llm_factory import get_llm
from datetime import datetime
from tavily import TavilyClient
from dotenv import load_dotenv
import os

load_dotenv() 

TAVILY_API_KEY = os.getenv("TAVILY_API_KEY")
tavily_client = TavilyClient(TAVILY_API_KEY)

def buscar_noticias(query="Banco Central do Brasil infla√ß√£o taxa de juros Selic comunicados oficiais √∫ltimas not√≠cias"):
    print("üîé Buscando not√≠cias do Banco Central com Tavily...")
    resultados = tavily_client.search(
        query=query,
        max_results=10,
        topic="news",
        days=20,
        include_domains=[
        "valor.globo.com",
        "exame.com",
        "economia.estadao.com.br",
        "g1.globo.com",
        "cnnbrasil.com.br",
        "infomoney.com.br",
        "folha.uol.com.br",
        "oglobo.globo.com",
        "economia.uol.com.br",
        "bcb.gov.br",
        "abac.org.br",
        "ibge.gov.br",
        "ibre.fgv.br",
        "https://abac.org.br/imprensa/press-releases",
        "https://abac.org.br/imprensa/consorcio-na-midia-todos"
    ],
        include_images=False,
        include_image_descriptions=False,
        search_depth="advanced",
        exclude_domains=["instagram.com"]
    )
    return resultados.get("results", [])

def formatar_resultados(noticias):
    resumo = ""
    for n in noticias:
        titulo = n.get("title")
        url = n.get("url")
        trecho = n.get("content", "").strip().replace("\n", " ")
        data = n.get("published_date")
        dominio = url.split("/")[2].replace("www.", "")
        score = n.get("score")
        resumo += (
            f"- **Fonte**: {dominio}\n"
            f"  **T√≠tulo**: {titulo}\n"
            f"  **Link**: {url}\n"
            f"  **Resumo**: {trecho[:300]}...\n\n"
            f"  **Data**: {data}\n\n"
            f"  **Score**: {score}\n"
        )
    return resumo

def search_bcb(state):
    noticias = buscar_noticias()
    if not noticias:
        print("‚ö†Ô∏è Nenhuma not√≠cia encontrada.")
        return state

    resumo_links = formatar_resultados(noticias)
    data_execucao = datetime.now().strftime("%d/%m/%Y")

    prompt = f"""
Data de execu√ß√£o do relat√≥rio: {data_execucao}

Voc√™ √© um analista econ√¥mico respons√°vel por elaborar relat√≥rios informativos para a diretoria de uma empresa de cons√≥rcios.

Com base nas not√≠ciasdos √∫ltimos 15 dias sobre o **Banco Central do Brasil**, elabore um relat√≥rio profissional:

{resumo_links}

D√™ foco especial a decis√µes, regulamenta√ß√µes, comunicados oficiais, mudan√ßas na **taxa Selic**, proje√ß√µes econ√¥micas e quaisquer medidas que possam impactar o mercado financeiro ou o setor de cons√≥rcios.

**Requisitos obrigat√≥rios**:
- Informe a **data de publica√ß√£o** de cada not√≠cia.
- Cite **explicitamente a fonte confi√°vel** da informa√ß√£o (ex: Valor Econ√¥mico, G1, Estad√£o, CNN, etc).
- Inclua o **link direto para a not√≠cia original** ao final do relat√≥rio, em uma se√ß√£o chamada **"Fontes e Links"**.
- Apresente os dados de forma clara, objetiva e com linguagem profissional.
- Separe as not√≠cias por t√≥picos ou subt√≠tulos, se necess√°rio.

**Formato esperado por item**:
- **Data**: DD/MM/AAAA  
- **Fonte**: Nome da fonte  
- **Resumo**: [conte√∫do em linguagem formal e acess√≠vel]

Evite opini√µes pessoais, especula√ß√µes ou informa√ß√µes desatualizadas.
"""

    llm = get_llm("search")
    result = llm.invoke(prompt)
    state["search_bcb"] = result.content
    return state
